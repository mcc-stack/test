(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{348:function(t,a,s){t.exports=s.p+"assets/img/image-20200212172253575.03137b1a.png"},349:function(t,a,s){t.exports=s.p+"assets/img/image-20200302134849364.8f939e0b.png"},350:function(t,a,s){t.exports=s.p+"assets/img/image-20200217181944339.1000f779.png"},351:function(t,a,s){t.exports=s.p+"assets/img/image-20200217183940566.e3bd16be.png"},352:function(t,a,s){t.exports=s.p+"assets/img/image-20200212211912365.292cc62b.png"},353:function(t,a,s){t.exports=s.p+"assets/img/image-20200212214032084.69f1ad69.png"},354:function(t,a,s){t.exports=s.p+"assets/img/image-20200212214312111.b4087826.png"},355:function(t,a,s){t.exports=s.p+"assets/img/image-20200212214438029.9bc930a2.png"},412:function(t,a,s){"use strict";s.r(a);var n=s(42),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,n=t._self._c||a;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"java-se"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-se"}},[t._v("#")]),t._v(" Java SE")]),t._v(" "),n("h2",{attrs:{id:"面向对象基本特性介绍"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#面向对象基本特性介绍"}},[t._v("#")]),t._v(" 面向对象基本特性介绍")]),t._v(" "),n("p",[t._v("面向对象 OOP 是基于面向过程而言，面向对象简单来说就是将功能封装到对象（数据和操作结合）里，我们面向对象，让对象去完成这些功能。万物皆对象。")]),t._v(" "),n("p",[t._v("三大特性是继承、封装与多态。")]),t._v(" "),n("h2",{attrs:{id:"多态实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#多态实现原理"}},[t._v("#")]),t._v(" 多态实现原理")]),t._v(" "),n("p",[t._v("Java 对于方法调用动态绑定的实现主要依赖于"),n("strong",[t._v("方法表")]),t._v("，但通过类引用调用(invokevitual)和接口引用调用(invokeinterface)的实现则有所不同。")]),t._v(" "),n("h3",{attrs:{id:"方法表"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#方法表"}},[t._v("#")]),t._v(" 方法表")]),t._v(" "),n("p",[t._v("方法表是实现动态调用的核心。上面讲过方法表存放在方法区中的类型信息中。为了优化对象调用方法的速度，方法区的类型信息会增加一个指针，该指针指向一个记录该类方法的方法表，方法表中的每一个项都是对应方法的指针。\n这些方法中包括从父类继承的所有方法以及自身重写（override）的方法。")]),t._v(" "),n("h2",{attrs:{id:"java-基本类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-基本类型"}},[t._v("#")]),t._v(" Java 基本类型")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("基本类型")]),t._v(" "),n("th",[t._v("字节")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("byte")]),t._v(" "),n("td",[t._v("1 字节")])]),t._v(" "),n("tr",[n("td",[t._v("short")]),t._v(" "),n("td",[t._v("2 字节")])]),t._v(" "),n("tr",[n("td",[t._v("int")]),t._v(" "),n("td",[t._v("4 字节")])]),t._v(" "),n("tr",[n("td",[t._v("long")]),t._v(" "),n("td",[t._v("8 字节")])]),t._v(" "),n("tr",[n("td",[t._v("float")]),t._v(" "),n("td",[t._v("4 字节")])]),t._v(" "),n("tr",[n("td",[t._v("double")]),t._v(" "),n("td",[t._v("8 字节")])]),t._v(" "),n("tr",[n("td",[t._v("boolean")]),t._v(" "),n("td",[t._v("1 字节或 4 字节（被编译为 int）")])]),t._v(" "),n("tr",[n("td",[t._v("char")]),t._v(" "),n("td",[t._v("2 字节")])])])]),t._v(" "),n("p",[t._v("范围：拿 char 举例，char 的范围是["),n("strong",[t._v("-2^15-2^15-1")]),t._v("]。")]),t._v(" "),n("h2",{attrs:{id:"jdk、jre-和-jvm"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#jdk、jre-和-jvm"}},[t._v("#")]),t._v(" JDK、JRE 和 JVM")]),t._v(" "),n("p",[n("img",{attrs:{src:s(348),alt:"image-20200212172253575"}})]),t._v(" "),n("h2",{attrs:{id:"常用包"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用包"}},[t._v("#")]),t._v(" 常用包")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",{staticStyle:{"text-align":"left"}},[t._v("包名")]),t._v(" "),n("th",{staticStyle:{"text-align":"left"}},[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("java.lang")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("该包提供了 Java 编程的基础类，例如 Object、Math、String、StringBuffer、System、Thread 等，不使用该包就很难编写 Java 代码了。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("java.util")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("该包提供了包含集合框架、遗留的集合类、事件模型、日期和时间实施、国际化和各种实用工具类（字符串标记生成器、随机数生成器和位数组）。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("java.io")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("该包通过文件系统、数据流和序列化提供系统的输入与输出。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("java.net")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("该包提供实现网络应用与开发的类。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("java.sql")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("该包提供了使用 Java 语言访问并处理存储在数据源（通常是一个关系型数据库）中的数据 API。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("java.awt/javax.swing")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("这两个包提供了 GUI 设计与开发的类。java.awt 包提供了创建界面和绘制图形图像的所有类，而 javax.swing 包提供了一组“轻量级”的组件，尽量让这些组件在所有平台上的工作方式相同。")])]),t._v(" "),n("tr",[n("td",{staticStyle:{"text-align":"left"}},[t._v("java.text")]),t._v(" "),n("td",{staticStyle:{"text-align":"left"}},[t._v("提供了与自然语言无关的方式来处理文本、日期、数字和消息的类和接口。")])])])]),t._v(" "),n("h2",{attrs:{id:"重载与重写"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#重载与重写"}},[t._v("#")]),t._v(" 重载与重写")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("区别")]),t._v(" "),n("th",[t._v("重载方法")]),t._v(" "),n("th",[t._v("重写方法")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("参数列表")]),t._v(" "),n("td",[t._v("必须修改")]),t._v(" "),n("td",[t._v("一定不能修改")])]),t._v(" "),n("tr",[n("td",[t._v("返回类型")]),t._v(" "),n("td",[t._v("可以修改")]),t._v(" "),n("td",[t._v("一定不能修改")])]),t._v(" "),n("tr",[n("td",[t._v("异常")]),t._v(" "),n("td",[t._v("可以修改")]),t._v(" "),n("td",[t._v("可以减少或删除，一定不能抛出新的或者更广的异常")])]),t._v(" "),n("tr",[n("td",[t._v("访问")]),t._v(" "),n("td",[t._v("可以修改")]),t._v(" "),n("td",[t._v("一定不能做更严格的限制（可以降低限制）")])])])]),t._v(" "),n("ul",[n("li",[t._v("方法重载是一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,则称为方法的重载(Overloading)。")]),t._v(" "),n("li",[t._v("方法重写是在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法,就称为重写(Overriding)。")]),t._v(" "),n("li",[t._v("方法重载是一个类的多态性表现,而方法重写是子类与父类的一种多态性表现。")])]),t._v(" "),n("h2",{attrs:{id:"内存泄漏的场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内存泄漏的场景"}},[t._v("#")]),t._v(" 内存泄漏的场景")]),t._v(" "),n("p",[t._v("内存泄露是指不再使用的对象由于仍然被其他对象引用导致垃圾收集器不能及时释放这些对象占用的内存从而造成内存空间浪费的现象。")]),t._v(" "),n("h3",{attrs:{id:"引用类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#引用类型"}},[t._v("#")]),t._v(" 引用类型")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("级别")]),t._v(" "),n("th",[t._v("回收时机")]),t._v(" "),n("th",[t._v("用途")]),t._v(" "),n("th",[t._v("生存时间")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("强引用")]),t._v(" "),n("td",[t._v("从来不会")]),t._v(" "),n("td",[t._v("对象的一般状态")]),t._v(" "),n("td")]),t._v(" "),n("tr",[n("td",[t._v("软引用")]),t._v(" "),n("td",[t._v("在内存不足的时候")]),t._v(" "),n("td",[t._v("联合 ReferenceQueue 构造有效期短／占内存大／生命周期长的对象的二级高速缓冲器（内存不足时才清空）")]),t._v(" "),n("td",[t._v("内存不足时终止")])]),t._v(" "),n("tr",[n("td",[t._v("弱引用")]),t._v(" "),n("td",[t._v("在垃圾回收时")]),t._v(" "),n("td",[t._v("联合 ReferenceQueue 构造有效期短／占内存大／生命周期长的对象的一级高速缓冲器（系统发生 GC 则清空）")]),t._v(" "),n("td",[t._v("GC 运行后终止")])]),t._v(" "),n("tr",[n("td",[t._v("虚引用")]),t._v(" "),n("td",[t._v("在垃圾回收时")]),t._v(" "),n("td",[t._v("联合 ReferenceQueue 来跟踪对象被垃圾回收器回收的活动")]),t._v(" "),n("td",[t._v("GC 运行后终止")])])])]),t._v(" "),n("h3",{attrs:{id:"场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#场景"}},[t._v("#")]),t._v(" 场景")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("使用静态的集合类")]),t._v(" "),n("p",[t._v("静态的集合类的生命周期和应用程序的生命周期一样长，所以在程序结束前容器中的对象不能被释放，会造成内存泄露。解决办法是最好不使用静态的集合类，如果使用的话，在不需要容器时要将其赋值为 null。")])]),t._v(" "),n("li",[n("p",[t._v("单例模式可能会造成内存泄漏")]),t._v(" "),n("p",[t._v("单例模式只允许应用程序存在一个实例对象，并且这个实例对象的生命周期和应用程序的生命周期一样长，如果单例对象中拥有另一个对象的引用的话，这个被引用的对象就不能被及时回收。解决办法是单例对象中持有的其他对象使用弱引用，弱引用对象在 GC 线程工作时，其占用的内存会被回收掉。")])]),t._v(" "),n("li",[n("p",[t._v("变量不合理的作用域")]),t._v(" "),n("p",[t._v("如果变量的定义范围大于使用范围，并且在使用完后没有赋值为 null 的话，会出现内存泄露。定义变量的时候，能定义为局部变量就不要定义为成员变量，或者定义为成员变量的话，在使用完变量后，把变量赋值为 null。")])]),t._v(" "),n("li",[n("p",[t._v("数据库、网络、输入输出流，这些资源没有显示的关闭")])]),t._v(" "),n("li",[n("p",[t._v("使用非静态内部类")]),t._v(" "),n("p",[t._v("非静态内部类对象的构建依赖于其外部类，内部类对象会持有外部类对象的 this 引用，即时外部类对象不再被使用了，其占用的内存可能不会被 GC 回收，因为内部类的生命周期可能比外部类的生命周期要长，从而造成外部类对象不能被及时回收。解决办法是尽量使用静态内部类，静态内部类只是形式上在外部类的里面，静态内部类不会持有外部类的引用，可以把静态内部类理解成是一个独立的类，和外部类没什么关系。")]),t._v(" "),n("blockquote",[n("p",[t._v("为什么非静态内部类持有对外部类的引用？")]),t._v(" "),n("p",[t._v("非静态内部类虽然和外部类写在同一个文件中， 但是编译完成后， 还是生成各自的 class 文件，通过如下三个步骤，内部类对象通过 this 访问外部类对象的成员。")]),t._v(" "),n("ol",[n("li",[t._v("编译器自动为内部类添加一个成员变量， 这个成员变量的类型和外部类的类型相同，这个成员变量就是指向外部类对象(this)的引用；")]),t._v(" "),n("li",[t._v("编译器自动为内部类的构造方法添加一个参数，参数的类型是外部类的类型，在构造方法内部使用这个参数为内部类中添加的成员变量赋值；")]),t._v(" "),n("li",[t._v("在调用内部类的构造函数初始化内部类对象时，会默认传入外部类的引用。")])])])])]),t._v(" "),n("h2",{attrs:{id:"序列化与反序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#序列化与反序列化"}},[t._v("#")]),t._v(" 序列化与反序列化")]),t._v(" "),n("p",[n("strong",[t._v("序列化")]),t._v("是指将 Java 对象转换为字节序列的过程，而"),n("strong",[t._v("反序列化")]),t._v("则是将字节序列转换为 Java 对象的过程。")]),t._v(" "),n("h3",{attrs:{id:"实现序列化的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现序列化的好处"}},[t._v("#")]),t._v(" 实现序列化的好处")]),t._v(" "),n("ul",[n("li",[t._v("实现了数据的持久化，通过序列化可以把数据永久地保存到硬盘上（如：存储在文件里），实现永久保存对象。")]),t._v(" "),n("li",[t._v("利用序列化实现远程通信，即：能够在网络上传输对象。")])]),t._v(" "),n("h3",{attrs:{id:"实现原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#实现原理"}},[t._v("#")]),t._v(" 实现原理")]),t._v(" "),n("p",[t._v("只要对象实现了"),n("strong",[t._v("Serializable")]),t._v("、Externalizable 接口(该接口仅仅是一个标记接口，并不包含任何方法)，则该对象就实现了序列化。")]),t._v(" "),n("h4",{attrs:{id:"序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#序列化"}},[t._v("#")]),t._v(" 序列化")]),t._v(" "),n("p",[t._v("序列化，首先要创建某些 OutputStream 对象，然后将其封装在一个 ObjectOutputStream 对象内，这时调用 writeObject()方法，即可将对象序列化，并将其发送给 OutputStream（对象序列化是基于字节的，因此使用的 InputStream 和 OutputStream 继承的类）。")]),t._v(" "),n("h4",{attrs:{id:"反序列化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反序列化"}},[t._v("#")]),t._v(" 反序列化")]),t._v(" "),n("p",[t._v("反序列化，即反向进行序列化的过程，需要将一个 InputStream 封装在 ObjectInputStream 对象内，然后调用 readObject()方法，获得一个对象引用（它是指向一个向上转型的 Object），然后进行类型强制转换来得到该对象。")]),t._v(" "),n("h3",{attrs:{id:"序列化-反序列化失败场景"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#序列化-反序列化失败场景"}},[t._v("#")]),t._v(" 序列化/反序列化失败场景")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("声明为 static 和 transient 类型的成员变量不能被序列化")])]),t._v(" "),n("li",[n("p",[t._v("serialVersionUID 与对应的发送者的类的版本号不同不能被反序列化")]),t._v(" "),n("p",[t._v("如果序列化的类未显式的声明 serialVersionUID，则序列化运行时将基于该类的各个方面计算该类的默认 serialVersionUID 值，如“Java(TM) 对象序列化规范”中所述。不过，强烈建议 所有可序列化类都显式声明 serialVersionUID 值，原因是计算默认的 serialVersionUID 对类的详细信息具有较高的敏感性，根据编译器实现的不同可能千差万别，这样在反序列化过程中可能会导致意外的 InvalidClassException。")])])]),t._v(" "),n("h2",{attrs:{id:"访问权限"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#访问权限"}},[t._v("#")]),t._v(" 访问权限")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("访问权限")]),t._v(" "),n("th",[t._v("本类")]),t._v(" "),n("th",[t._v("本包的类")]),t._v(" "),n("th",[t._v("子类")]),t._v(" "),n("th",[t._v("非子类的外包类")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("public")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("是")])]),t._v(" "),n("tr",[n("td",[t._v("protected")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("否")])]),t._v(" "),n("tr",[n("td",[t._v("default")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("否")]),t._v(" "),n("td",[t._v("否")])]),t._v(" "),n("tr",[n("td",[t._v("private")]),t._v(" "),n("td",[t._v("是")]),t._v(" "),n("td",[t._v("否")]),t._v(" "),n("td",[t._v("否")]),t._v(" "),n("td",[t._v("否")])])])]),t._v(" "),n("h2",{attrs:{id:"与-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#与-的区别"}},[t._v("#")]),t._v(" &与&&的区别")]),t._v(" "),n("p",[t._v("&运算符有两种用法：(1)按位与；(2)逻辑与。&&运算符是短路与运算。")]),t._v(" "),n("p",[t._v("&的逻辑与和&&的短路与分别都是表示左边和右边都为 true，结果才为 true，但是使用短路与时，如果&&左边为 false，那么整个值就直接判断为 false，不会进行右边的逻辑操作。")]),t._v(" "),n("h2",{attrs:{id:"array-和-arraylist-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#array-和-arraylist-的区别"}},[t._v("#")]),t._v(" Array 和 ArrayList 的区别")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Array 可以包含基本类型和对象类型，ArrayList 只能包含对象类型；")])]),t._v(" "),n("li",[n("p",[t._v("Array 大小固定，ArrayList 是动态变化的；")])]),t._v(" "),n("li",[n("p",[t._v("ArrayList 有更多的特性，如 addAll()，removeAll()，iterator()等等。")])])]),t._v(" "),n("h2",{attrs:{id:"comparable-和-comparator-接口的作用以及区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#comparable-和-comparator-接口的作用以及区别"}},[t._v("#")]),t._v(" Comparable 和 Comparator 接口的作用以及区别")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("Comparable：只有 compareTo()；")])]),t._v(" "),n("li",[n("p",[t._v("Comparator：包含 compare()+equals()。")])])]),t._v(" "),n("h2",{attrs:{id:"collection-和-collections-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#collection-和-collections-的区别"}},[t._v("#")]),t._v(" Collection 和 Collections 的区别")]),t._v(" "),n("ul",[n("li",[t._v("Collection：集合类的上级接口，继承与他的接口主要有 Set 和 List；")]),t._v(" "),n("li",[t._v("Collections：针对集合类的一个帮助类，他提供一系列静态方法实现对各种集合的搜索、排序、线程安全化等操作。")])]),t._v(" "),n("h2",{attrs:{id:"快速失败-fail-fast-和安全失败-fail-safe-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#快速失败-fail-fast-和安全失败-fail-safe-的区别"}},[t._v("#")]),t._v(" 快速失败(fail-fast)和安全失败(fail-safe)的区别")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("fail-fast：java.util 包下面的所有的集合类都是快速失败的，快速失败的迭代器会抛出 ConcurrentModificationException 异常，具体底层是因为 remove 方法时，expectedModCount 不等于 modCount：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[t._v("    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("final")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("checkForComodification")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modCount "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" expectedModCount"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n            "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ConcurrentModificationException")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("当用集合的方法进行 add、remove、clear 操作时，modCount 就会发生改变，但是使用 Iterator 接口的 remove()方法是不会改变的。")])]),t._v(" "),n("li",[n("p",[t._v("fail-safe：java.util.concurrent 包下面的所有的类都是安全失败的，安全失败是基于对底层集合做拷贝，因此不会抛出异常。")])])]),t._v(" "),n("h2",{attrs:{id:"值传递和引用传递"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#值传递和引用传递"}},[t._v("#")]),t._v(" 值传递和引用传递")]),t._v(" "),n("ul",[n("li",[t._v("值传递是对基本变量而言的，传递的是变量的副本，改变副本不改变原值。")]),t._v(" "),n("li",[t._v("引用传递是对于对象型变量而言的，传递的是对象的副本，对引用对象进行操作会改变源对象。")])]),t._v(" "),n("p",[t._v("java 中大部分都是"),n("strong",[t._v("值传递")]),t._v("，包括引用对象，所谓的值传递个人理解是，传递了一个栈帧的拷贝，并且与源栈帧指向相同的句柄或者堆实例对象内存地址，以下是他人总结：")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("如果是对基本数据类型的数据进行操作，由于原始内容和副本都是存储实际值，并且是在不同的栈区，因此形参的操作，不影响原始内容。")])]),t._v(" "),n("li",[n("p",[t._v("如果是对引用类型的数据进行操作，形参和实参保持指向同一个对象地址，引用不改变下，形参的操作，会影响实参指向的对象的内容。")])])]),t._v(" "),n("p",[n("strong",[t._v("==和 equals 的区别：")])]),t._v(" "),n("ul",[n("li",[t._v("==如果是基本类型比较的是值是否相等，如果是引用类型比较的是指向的内存地址是否相等。")]),t._v(" "),n("li",[t._v("equals 如果没有重写比较的是地址是否相等，重写了可以比较值是否相等。")])]),t._v(" "),n("h2",{attrs:{id:"double-类型的比较"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#double-类型的比较"}},[t._v("#")]),t._v(" Double 类型的比较")]),t._v(" "),n("p",[t._v("因为二进制的"),n("strong",[t._v("小数")]),t._v("无法精确表达 10 进制小数，所以直接使用 double==判断会产生误差，需要使用 new BigDecimal(value.toString)转成 BigDecimal 对象进行比较。")]),t._v(" "),n("p",[t._v("BigDecimal 原理：把十进制小数扩大 N 倍让它在"),n("strong",[t._v("整数")]),t._v("的维度上进行计算，并保留相应的精度信息。scale 记录精度信息，intCompact 记录被放大的整数信息。")]),t._v(" "),n("h2",{attrs:{id:"equals-与-hashcode"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#equals-与-hashcode"}},[t._v("#")]),t._v(" equals 与 hashCode")]),t._v(" "),n("p",[t._v("若是对象，需要同时重写这两者，两者重写与不重写如下所示：")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th"),t._v(" "),n("th",[t._v("不重写")]),t._v(" "),n("th",[t._v("重写")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("hashCode")]),t._v(" "),n("td",[t._v("比较内存地址，具体 jvm 可能不同")]),t._v(" "),n("td",[t._v("自定义逻辑")])]),t._v(" "),n("tr",[n("td",[t._v("equals")]),t._v(" "),n("td",[t._v("比较内存地址")]),t._v(" "),n("td",[t._v("自定义逻辑")])])])]),t._v(" "),n("p",[t._v("Java 对象的 eqauls 方法和 hashCode 方法是这样规定的：")]),t._v(" "),n("ol",[n("li",[t._v("相等（相同）的对象必须具有相等的哈希码（或者散列码）；")]),t._v(" "),n("li",[t._v("如果两个对象的 hashCode 相同，它们并不一定相同。")])]),t._v(" "),n("h2",{attrs:{id:"arraylist-与-linkedlist-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#arraylist-与-linkedlist-的区别"}},[t._v("#")]),t._v(" ArrayList 与 LinkedList 的区别")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("数据结构不同")]),t._v(" "),n("p",[t._v("ArrayList 底层是 Object 数组，而 LinkedList 底层维护了 Node 类型的链表。")])]),t._v(" "),n("li",[n("p",[t._v("效率不同")]),t._v(" "),n("p",[t._v("查找元素时，ArrayList 获取元素为 O(1)，LinkedList 为 O(n)；当对数据的中间部分进行增加和删除时，LinkedList 效率更高。ArrayList 会使用 System.arraycopy()进行数据迁移操作。")])])]),t._v(" "),n("h2",{attrs:{id:"异常体系"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#异常体系"}},[t._v("#")]),t._v(" 异常体系")]),t._v(" "),n("p",[n("img",{attrs:{src:s(349),alt:"image-20200302134849364"}})]),t._v(" "),n("h2",{attrs:{id:"反射"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#反射"}},[t._v("#")]),t._v(" 反射")]),t._v(" "),n("p",[t._v("反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为 java 语言的反射机制。")]),t._v(" "),n("h3",{attrs:{id:"工作原理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作原理"}},[t._v("#")]),t._v(" 工作原理")]),t._v(" "),n("p",[t._v("在类加载的加载阶段，类加载器会根据类的全限定名读取二进制字节流到 JVM 的内部，并存储在元空间，在将其转换为目标类型对应的 java 实例，而反射就是在这一阶段读取对应的 class 文件从而获取相应的信息。")]),t._v(" "),n("h3",{attrs:{id:"工作流程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#工作流程"}},[t._v("#")]),t._v(" 工作流程")]),t._v(" "),n("p",[t._v("首先通过.forName()获取目标对象，通过目标对象的 getDeclaredField()方法获取字段（Field）对象，然后再通过字段对象的 setAccessible(true)将其设置为可以访问，接下来就可以通过 get/set 方法来获取/设置字段的值了。")]),t._v(" "),n("p",[t._v("获取类：")]),t._v(" "),n("ol",[n("li",[t._v(".forName(全限定名)")]),t._v(" "),n("li",[t._v("类名.class")]),t._v(" "),n("li",[t._v("对象.getClass()")])]),t._v(" "),n("p",[t._v("获取内容：")]),t._v(" "),n("ol",[n("li",[t._v("getDeclaredMethods()")]),t._v(" "),n("li",[t._v("getDeclaredFields()")]),t._v(" "),n("li",[t._v("getDeclaredConstructors()")])]),t._v(" "),n("p",[t._v("使用：")]),t._v(" "),n("ol",[n("li",[t._v("方法.invoke(参数)")]),t._v(" "),n("li",[t._v("构造方法.newInstance()")]),t._v(" "),n("li",[t._v("类对象.newInstance()")])]),t._v(" "),n("h2",{attrs:{id:"内部类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#内部类"}},[t._v("#")]),t._v(" 内部类")]),t._v(" "),n("p",[t._v("内部类分为成员内部类，静态内部类，局部内部类和匿名内部类。")]),t._v(" "),n("p",[t._v("成员内部类特点：")]),t._v(" "),n("ol",[n("li",[t._v("不允许有静态变量或方法；")]),t._v(" "),n("li",[t._v("依附外部类，只有创建外部类才能创建内部类。")])]),t._v(" "),n("p",[t._v("静态内部类特点：")]),t._v(" "),n("ol",[n("li",[t._v("不依赖外部类；")]),t._v(" "),n("li",[t._v("不可以使用任何外部类的非 static 属性或方法。")])]),t._v(" "),n("p",[t._v("局部内部类特点：")]),t._v(" "),n("ol",[n("li",[t._v("类不允许使用访问权限修饰符；")]),t._v(" "),n("li",[t._v("除了方法，完全隐藏；")]),t._v(" "),n("li",[t._v("方法形参必须是 final。")])]),t._v(" "),n("p",[t._v("匿名内部类特点：")]),t._v(" "),n("ol",[n("li",[t._v("必须继承一个抽象类或者一个接口；")]),t._v(" "),n("li",[t._v("没有构造方法；")]),t._v(" "),n("li",[t._v("方法形参必须为 final。")])]),t._v(" "),n("p",[t._v("所有内部类均可访问可访问的外部类属性和方法，外部类可以通过创建内部类实例来间接访问内部类。")]),t._v(" "),n("h3",{attrs:{id:"为什么需要-final"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#为什么需要-final"}},[t._v("#")]),t._v(" 为什么需要 final")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("类的生命周期")]),t._v(" "),n("p",[t._v("由于内部类不会随着外部类毁灭而毁灭，因此为了保证数据不会引用到空对象，所以需要拷贝一份参数。")])]),t._v(" "),n("li",[n("p",[t._v("数据一致性")]),t._v(" "),n("p",[t._v("为了实现数据一致性，防止原先的局部变量发生改变以至于内部类得不到通知，使程序结果与预期不同，所以需要 final 修饰访问的参数。")])])]),t._v(" "),n("h2",{attrs:{id:"抽象类和接口的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#抽象类和接口的区别"}},[t._v("#")]),t._v(" 抽象类和接口的区别")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th"),t._v(" "),n("th",[t._v("抽象类")]),t._v(" "),n("th",[t._v("接口")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("是否有非抽象方法")]),t._v(" "),n("td",[t._v("可以有非抽象方法")]),t._v(" "),n("td",[t._v("全是抽象方法")])]),t._v(" "),n("tr",[n("td",[t._v("是否有构造方法")]),t._v(" "),n("td",[t._v("有")]),t._v(" "),n("td",[t._v("没有")])]),t._v(" "),n("tr",[n("td",[t._v("是否有普通成员变量")]),t._v(" "),n("td",[t._v("有")]),t._v(" "),n("td",[t._v("没有")])]),t._v(" "),n("tr",[n("td",[t._v("访问权限")]),t._v(" "),n("td",[t._v("没有限制")]),t._v(" "),n("td",[t._v("必须是 public 权限")])]),t._v(" "),n("tr",[n("td",[t._v("是否有静态方法和静态代码块")]),t._v(" "),n("td",[t._v("有")]),t._v(" "),n("td",[t._v("没有(java8 有)")])]),t._v(" "),n("tr",[n("td",[t._v("方法参数类型")]),t._v(" "),n("td",[t._v("没有限制")]),t._v(" "),n("td",[t._v("必须是 static final")])]),t._v(" "),n("tr",[n("td",[t._v("继承/实现")]),t._v(" "),n("td",[t._v("单继承")]),t._v(" "),n("td",[t._v("可以多实现")])]),t._v(" "),n("tr",[n("td",[t._v("抽象目标")]),t._v(" "),n("td",[t._v("对类抽象")]),t._v(" "),n("td",[t._v("对行为抽象")])]),t._v(" "),n("tr",[n("td",[t._v("设计思想")]),t._v(" "),n("td",[t._v("模板式设计")]),t._v(" "),n("td",[t._v("辐射式设计")])])])]),t._v(" "),n("h2",{attrs:{id:"泛型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#泛型"}},[t._v("#")]),t._v(" 泛型")]),t._v(" "),n("p",[t._v("泛型即参数化类型，是编译器的概念。(Array 不支持泛型)")]),t._v(" "),n("h3",{attrs:{id:"使用泛型的好处"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#使用泛型的好处"}},[t._v("#")]),t._v(" 使用泛型的好处")]),t._v(" "),n("ol",[n("li",[t._v("类型安全，防止出现 ClassCastException 异常；")]),t._v(" "),n("li",[t._v("消除强制转换。")])]),t._v(" "),n("h3",{attrs:{id:"类型擦除"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#类型擦除"}},[t._v("#")]),t._v(" 类型擦除")]),t._v(" "),n("p",[t._v("当编译器对带有泛型的 java 代码进行编译时，它会去执行类型检查和类型推断，然后生成普通的不带泛型的字节码，这种普通的字节码可以被一般的 Java 虚拟机接收并执行，这就叫做"),n("strong",[t._v("类型擦除")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"限定通配符与非限定通配符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#限定通配符与非限定通配符"}},[t._v("#")]),t._v(" 限定通配符与非限定通配符")]),t._v(" "),n("p",[t._v("限定通配符对类型进行了限制。有两种限定通配符，一种是"),n("code",[t._v("<? extends T>")]),t._v("它通过确保类型必须是 T 的子类来设定类型的"),n("strong",[t._v("上界")]),t._v("，另一种是"),n("code",[t._v("<? super T>")]),t._v("它通过确保类型必须是 T 的父类来设定类型的"),n("strong",[t._v("下界")]),t._v("。泛型类型必须用限定内的类型来进行初始化，否则会导致编译错误。")]),t._v(" "),n("p",[t._v("另一方面"),n("code",[t._v("<?>")]),t._v("表 示了非限定通配符，因为"),n("code",[t._v("<?>")]),t._v("可以用任意类型来替代。")]),t._v(" "),n("h3",{attrs:{id:"list-和-list-object-的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#list-和-list-object-的区别"}},[t._v("#")]),t._v(" List<?>和 List<Object>的区别")]),t._v(" "),n("p",[t._v("List<?> 是一个未知类型的 List，而 List<Object> 其实是任意类型的 List。你可以把 List<String>, List<Integer>赋值给 List<?>，却不能把 List<String>赋值给 List<Object>。")]),t._v(" "),n("h2",{attrs:{id:"注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注解"}},[t._v("#")]),t._v(" 注解")]),t._v(" "),n("p",[t._v("注解通过 @interface 关键字进行定义，简单理解就是贴标签。")]),t._v(" "),n("h3",{attrs:{id:"元注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#元注解"}},[t._v("#")]),t._v(" 元注解")]),t._v(" "),n("p",[t._v("元注解是可以注解到注解上的注解，或者说元注解是一种基本注解，但是它能够应用到其它的注解上面。其实就是普通注解的描述。")]),t._v(" "),n("h4",{attrs:{id:"retention"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#retention"}},[t._v("#")]),t._v(" @Retention")]),t._v(" "),n("p",[t._v("规定注解的存活时间，具体值如下：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("RetentionPolicy.SOURCE")]),t._v(" "),n("p",[t._v("注解只在源码阶段保留，在编译器进行编译时它将被丢弃忽视。")])]),t._v(" "),n("li",[n("p",[t._v("RetentionPolicy.CLASS")]),t._v(" "),n("p",[t._v("注解只被保留到编译进行的时候，它并不会被加载到 JVM 中。")])]),t._v(" "),n("li",[n("p",[t._v("RetentionPolicy.RUNTIME")]),t._v(" "),n("p",[t._v("注解可以保留到程序运行的时候，它会被加载进入到 JVM 中，所以在程序运行时可以获取到它们。")])])]),t._v(" "),n("h4",{attrs:{id:"documented"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#documented"}},[t._v("#")]),t._v(" @Documented")]),t._v(" "),n("p",[t._v("它的作用是能够将注解中的元素包含到 Javadoc 中去。")]),t._v(" "),n("h4",{attrs:{id:"target"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#target"}},[t._v("#")]),t._v(" @Target")]),t._v(" "),n("p",[t._v("@Target 指定了注解运用的地方，即限定使用场景，具体值如下：")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("ElementType.ANNOTATION_TYPE")]),t._v(" "),n("p",[t._v("可以给一个注解进行注解。")])]),t._v(" "),n("li",[n("p",[t._v("ElementType.CONSTRUCTOR")]),t._v(" "),n("p",[t._v("可以给构造方法进行注解。")])]),t._v(" "),n("li",[n("p",[t._v("ElementType.FIELD")]),t._v(" "),n("p",[t._v("可以给属性进行注解。")])]),t._v(" "),n("li",[n("p",[t._v("ElementType.LOCAL_VARIABLE")]),t._v(" "),n("p",[t._v("可以给局部变量进行注解。")])]),t._v(" "),n("li",[n("p",[t._v("ElementType.METHOD")]),t._v(" "),n("p",[t._v("可以给方法进行注解。")])]),t._v(" "),n("li",[n("p",[t._v("ElementType.PACKAGE")]),t._v(" "),n("p",[t._v("可以给一个包进行注解。")])]),t._v(" "),n("li",[n("p",[t._v("ElementType.PARAMETER")]),t._v(" "),n("p",[t._v("可以给一个方法内的参数进行注解。")])]),t._v(" "),n("li",[n("p",[t._v("ElementType.TYPE")]),t._v(" "),n("p",[t._v("可以给一个类型进行注解，比如类、接口、枚举。")])])]),t._v(" "),n("h4",{attrs:{id:"inherited"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#inherited"}},[t._v("#")]),t._v(" @Inherited")]),t._v(" "),n("p",[t._v("如果一个超类被 @Inherited 注解过的注解进行注解的话，那么如果它的子类没有被任何注解应用的话，那么这个子类就继承了超类的注解。")]),t._v(" "),n("h4",{attrs:{id:"repeatable"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#repeatable"}},[t._v("#")]),t._v(" @Repeatable")]),t._v(" "),n("p",[t._v("这个注解可以有多个不同的属性。")]),t._v(" "),n("h3",{attrs:{id:"注解的属性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#注解的属性"}},[t._v("#")]),t._v(" 注解的属性")]),t._v(" "),n("p",[t._v("注解的属性也叫做成员变量，注解只有成员变量，没有方法。如下：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Target")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ElementType")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("TYPE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@Retention")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RetentionPolicy")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("RUNTIME"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("TestAnnotation")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("id")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("msg")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Hi"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[t._v("其中，default 是为属性赋予默认值。使用方式如下：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 有默认值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@TestAnnotation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Test")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有默认值")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@TestAnnotation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("msg"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Hi'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 只有一个id属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@TestAnnotation")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 没有任何属性")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token annotation punctuation"}},[t._v("@TestAnnotation")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n")])])]),n("h3",{attrs:{id:"java-预置的注解"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java-预置的注解"}},[t._v("#")]),t._v(" Java 预置的注解")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("@Deprecated")]),t._v(" "),n("p",[t._v("告诉开发者，这是一个过时的元素。")])]),t._v(" "),n("li",[n("p",[t._v("@Override")]),t._v(" "),n("p",[t._v("要重写的方法。")])]),t._v(" "),n("li",[n("p",[t._v("@SuppressWarnings")]),t._v(" "),n("p",[t._v("忽略被编译器提醒的警告。")])]),t._v(" "),n("li",[n("p",[t._v("@SafeVarargs")]),t._v(" "),n("p",[t._v("参数安全类型注解。提醒开发者不要用参数做一些不安全的操作,它的存在会阻止编译器产生 unchecked 这样的警告。")])]),t._v(" "),n("li",[n("p",[t._v("@FunctionalInterface")]),t._v(" "),n("p",[t._v("函数式接口注解，所谓的函数式编程是 Java8 引入的概念，它是仅有一个方法的普通接口。")])])]),t._v(" "),n("h3",{attrs:{id:"如何使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#如何使用"}},[t._v("#")]),t._v(" 如何使用")]),t._v(" "),n("ol",[n("li",[t._v("使用 AOP 进行对特定注解的拦截，执行自己的处理逻辑。如限流、打印日志、报告异常等。")]),t._v(" "),n("li",[t._v("使用反射，对特定注解进行拦截，执行相应的处理操作。")])]),t._v(" "),n("h2",{attrs:{id:"io"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#io"}},[t._v("#")]),t._v(" IO")]),t._v(" "),n("p",[t._v("数据在两设备间的传输称为流。流的本质是数据传输,根据数据传输特性将流抽象为各种类,方便更直观的进行数据操作。")]),t._v(" "),n("h3",{attrs:{id:"分类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[t._v("#")]),t._v(" 分类")]),t._v(" "),n("p",[n("strong",[t._v("按操作对象来分：")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("文件（file）：FileInputStream、FileOutputStream、FileReader、FileWriter")])]),t._v(" "),n("li",[n("p",[t._v("数组（[]）：")]),t._v(" "),n("ul",[n("li",[t._v("2.1、字节数组（byte[]）：ByteArrayInputStream、ByteArrayOutputStream")]),t._v(" "),n("li",[t._v("2.2、字符数组（char[]）：CharArrayReader、CharArrayWriter")])])]),t._v(" "),n("li",[n("p",[t._v("管道操作：PipedInputStream、PipedOutputStream、PipedReader、PipedWriter")])]),t._v(" "),n("li",[n("p",[t._v("基本数据类型：DataInputStream、DataOutputStream")])]),t._v(" "),n("li",[n("p",[t._v("缓冲操作：BufferedInputStream、BufferedOutputStream、BufferedReader、BufferedWriter")])]),t._v(" "),n("li",[n("p",[t._v("打印：PrintStream、PrintWriter")])]),t._v(" "),n("li",[n("p",[t._v("对象序列化反序列化：ObjectInputStream、ObjectOutputStream")])]),t._v(" "),n("li",[n("p",[t._v("转换：InputStreamReader、OutputStreWriter")])])]),t._v(" "),n("p",[n("strong",[t._v("从运输方式角度来分：")])]),t._v(" "),n("ol",[n("li",[t._v("字节流")]),t._v(" "),n("li",[t._v("字符流")])]),t._v(" "),n("p",[t._v("字节流用来处理二进制文件（图片、MP3、视频文件），字符流用来处理文本文件。字节流继承 inputStream 和 OutputStream,字符流继承自 Reader 和 Writer。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(350),alt:"image-20200217181944339"}})]),t._v(" "),n("h3",{attrs:{id:"字节流和字符流的区别"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#字节流和字符流的区别"}},[t._v("#")]),t._v(" 字节流和字符流的区别")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th"),t._v(" "),n("th",[t._v("字节流")]),t._v(" "),n("th",[t._v("字符流")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("是否用到缓冲区（内存）")]),t._v(" "),n("td",[t._v("不用")]),t._v(" "),n("td",[t._v("需要")])]),t._v(" "),n("tr",[n("td",[t._v("操作对象")]),t._v(" "),n("td",[t._v("任何类型，包括二进制")]),t._v(" "),n("td",[t._v("只能处理字符或者字符串")])]),t._v(" "),n("tr",[n("td",[t._v("祖先")]),t._v(" "),n("td",[t._v("InputStream/OutputStream")]),t._v(" "),n("td",[t._v("Reader/Writer")])]),t._v(" "),n("tr",[n("td",[t._v("使用场景")]),t._v(" "),n("td",[t._v("大部分情况")]),t._v(" "),n("td",[t._v("频繁对字符操作")])])])]),t._v(" "),n("h3",{attrs:{id:"randomaccessfile"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#randomaccessfile"}},[t._v("#")]),t._v(" RandomAccessFile")]),t._v(" "),n("p",[t._v("它在 java.io 包中是一个特殊的类，既不是输入流也不是输出流，它两者都可以做到。他是 Object 的直接子类。通常来说，一个流只有一个功能，要么读，要么写。但是 RandomAccessFile"),n("strong",[t._v("既可以读文件，也可以写文件")]),t._v("。")]),t._v(" "),n("h3",{attrs:{id:"system-out-println"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#system-out-println"}},[t._v("#")]),t._v(" System.out.println")]),t._v(" "),n("p",[t._v("println 是 PrintStream 的一个方法。out 是一个静态 PrintStream 类型的成员变量，System 是一个 java.lang 包中的类，用于和底层的操作系统进行交互。")]),t._v(" "),n("h3",{attrs:{id:"缓冲区"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#缓冲区"}},[t._v("#")]),t._v(" 缓冲区")]),t._v(" "),n("ol",[n("li",[t._v("缓冲区就是一段特殊的内存区域，很多情况下当程序需要频繁地操作一个资源（如文件或数据库）则性能会很低，所以为了提升性能就可以将一部分数据暂时读写到缓存区，以后直接从此区域中读写数据即可，这样就显著提升了性。")]),t._v(" "),n("li",[t._v("对于 Java 字符流的操作都是在缓冲区操作的，所以如果我们想在字符流操作中主动将缓冲区刷新到文件则可以使用 flush() 方法操作。")])]),t._v(" "),n("h3",{attrs:{id:"printstream、bufferedwriter、printwriter"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#printstream、bufferedwriter、printwriter"}},[t._v("#")]),t._v(" PrintStream、BufferedWriter、PrintWriter")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("PrintStream")]),t._v(" "),n("p",[t._v("输出功能非常强大，通常如果需要输出文本内容，都应该将输出流包装成 PrintStream 后进行输出。用来处理字节流。")])]),t._v(" "),n("li",[n("p",[t._v("BufferedWriter")]),t._v(" "),n("p",[t._v("将文本写入字符输出流，缓冲各个字符从而提供单个字符，数组和字符串的高效写入。通过 write()方法可以将获取到的字符输出，然后通过 "),n("strong",[t._v("newLine()")]),t._v(" 进行换行操作。BufferedWriter 中的字符流必须通过调用 flush 方法才能将其刷出去。并且 BufferedWriter 只能对字符流进行操作。如果要对字节流操作，则使用 BufferedInputStream。")])]),t._v(" "),n("li",[n("p",[t._v("PrintWriter")]),t._v(" "),n("p",[t._v("与 PrintStream 相似，用于处理字符流。")])])]),t._v(" "),n("h3",{attrs:{id:"节点流与处理流"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#节点流与处理流"}},[t._v("#")]),t._v(" 节点流与处理流")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("节点流")]),t._v(" "),n("p",[t._v("直接与数据源相连，用于输入或者输出。")])]),t._v(" "),n("li",[n("p",[t._v("处理流")]),t._v(" "),n("p",[t._v("在节点流的基础上对之进行加工，进行一些功能的扩展。")])])]),t._v(" "),n("p",[t._v("处理流的构造器必须要传入节点流的子类。")]),t._v(" "),n("p",[n("img",{attrs:{src:s(351),alt:"image-20200217183940566"}})]),t._v(" "),n("h3",{attrs:{id:"流的关闭操作"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#流的关闭操作"}},[t._v("#")]),t._v(" 流的关闭操作")]),t._v(" "),n("ol",[n("li",[t._v("流一旦打开就必须关闭，使用 close 方法。")]),t._v(" "),n("li",[t._v("放入 finally 语句块中（finally 语句一定会执行）。")]),t._v(" "),n("li",[t._v("调用处理流后就关闭处理流。")]),t._v(" "),n("li",[t._v("多个流互相调用只关闭最外层的流。")])]),t._v(" "),n("h2",{attrs:{id:"java8-新特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#java8-新特性"}},[t._v("#")]),t._v(" Java8 新特性")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("Lambda 表达式——允许把函数作为方法的参数；")])]),t._v(" "),n("li",[n("p",[t._v("方法引用——直接引用已有的 Java 类或对象的方法或构造器；")])]),t._v(" "),n("li",[n("p",[t._v("默认方法——接口里面有一个默认实现方法；")])]),t._v(" "),n("li",[n("p",[t._v("新工具——新的编译工具，如：Nashorn 引擎 jjs、 类依赖分析器 jdeps；")])]),t._v(" "),n("li",[n("p",[t._v("Stream API——函数式编程；")])]),t._v(" "),n("li",[n("p",[t._v("Date Time API——加强对日期与时间的处理；")])]),t._v(" "),n("li",[n("p",[t._v("Optional 类——解决空指针异常；")])]),t._v(" "),n("li",[n("p",[t._v("Nashorn, JavaScript 引擎—— Java 8 提供了一个新的 Nashorn javascript 引擎，它允许我们在 JVM 上运行特定的 javascript 应用。")])])]),t._v(" "),n("h3",{attrs:{id:"lambda-表达式"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#lambda-表达式"}},[t._v("#")]),t._v(" Lambda 表达式")]),t._v(" "),n("p",[t._v("例子："),n("code",[t._v('new Thread(() -> System.out.println("thread"));')])]),t._v(" "),n("p",[t._v("（）是接口方法的括号，当有多个抽象方法就不能表示了，所以函数型接口是支持只有一个抽象方法的接口。")]),t._v(" "),n("p",[n("strong",[t._v("表达式特征：")])]),t._v(" "),n("ul",[n("li",[t._v("可选类型声明：不需要声明参数类型，编译器可以统一识别参数值。")]),t._v(" "),n("li",[t._v("可选的参数圆括号：一个参数无需定义圆括号，但多个参数需要定义圆括号。")]),t._v(" "),n("li",[t._v("可选的大括号：如果主体包含了一个语句，就不需要使用大括号。")]),t._v(" "),n("li",[t._v("可选的返回关键字：如果主体只有一个表达式返回值则编译器会自动返回值，大括号需要指定明表达式返回了一个数值。")])]),t._v(" "),n("p",[n("strong",[t._v("方法引用：")])]),t._v(" "),n("ol",[n("li",[n("p",[n("strong",[t._v("对象::实例方法")]),t._v("，将 lambda 的参数当做方法的参数使用：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Consumer")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sc "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等效")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Consumer")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sc2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nsc"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("accept")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hey"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("类::静态方法")]),t._v("，将 lambda 的参数当做方法的参数使用：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等效")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sf2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" apply1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("123")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[n("strong",[t._v("类::实例方法")]),t._v("，将 lambda 的第一个参数当做方法的调用者，其他的参数作为方法的参数。开发中尽量少些此类写法，减少后续维护成本：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BiPredicate")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sbp "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等效")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BiPredicate")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" sbp2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" x"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("equals")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("y"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" test "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sbp"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"a"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),n("p",[n("strong",[t._v("构造引用：")])]),t._v(" "),n("ol",[n("li",[n("p",[t._v("无参的构造方法是类::实例方法模型：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" us "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("::")]),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等效")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Supplier")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" us2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取对象")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" user "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" us"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("有参的构造方法：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//一个参数,参数类型不同则会编译出错")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" uf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" id "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//或加括号")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" uf2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//等效")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Function")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" uf3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),t._v(" id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" apply "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" uf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("61888")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//两个参数")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("BiFunction")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Integer")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" ubf "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("->")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("id"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("User")]),t._v(" happy "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" ubf"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("apply")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("618")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"狂欢happy"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"接口的默认方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#接口的默认方法"}},[t._v("#")]),t._v(" 接口的默认方法")]),t._v(" "),n("p",[t._v("实际的例子有 List 接口的 sort 方法，它是一个默认方法：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("extends")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Collection")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ...其他成员")]),t._v("\n\n    "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sort")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Comparator")]),n("span",{pre:!0,attrs:{class:"token generics"}},[n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("super")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("E")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" c"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n      "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("p",[n("strong",[t._v("三条规则：")])]),t._v(" "),n("ol",[n("li",[n("strong",[t._v("类中的方法")]),t._v("优先级最高，类或父类中声明的方法的优先级高于任何声明为默认方法的优先级。")]),t._v(" "),n("li",[t._v("如果第一条无法判断，那么"),n("strong",[t._v("子接口的优先级更高")]),t._v("：方法签名相同时，优先选择拥有最具体实现的默认方法的接口，即如果 B 继承了 A，那么 B 就比 A 更加具体。")]),t._v(" "),n("li",[t._v("最后，如果还是无法判断，继承了多个接口的类必须通过显式覆盖和调用期望的方法，显式地选择使用哪一个默认方法的实现。")])]),t._v(" "),n("h3",{attrs:{id:"localdatetime"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#localdatetime"}},[t._v("#")]),t._v(" LocalDateTime")]),t._v(" "),n("h4",{attrs:{id:"localdate"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#localdate"}},[t._v("#")]),t._v(" LocalDate")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("创建：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//获取当前年月日")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),t._v(" localDate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//构造指定的年月日")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),t._v(" localDate2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("of")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2020")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("12")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("获取年、月、日、星期：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" year "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getYear")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" year1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChronoField")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("YEAR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Month")]),t._v(" month "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMonth")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" month1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChronoField")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("MONTH_OF_YEAR"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" day "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDayOfMonth")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" day1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChronoField")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DAY_OF_MONTH"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DayOfWeek")]),t._v(" dayOfWeek "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("getDayOfWeek")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" dayOfWeek1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ChronoField")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("DAY_OF_WEEK"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),n("h4",{attrs:{id:"localtime"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#localtime"}},[t._v("#")]),t._v(" LocalTime")]),t._v(" "),n("p",[t._v("创建和获取与 LocalDate 相似，不再赘述。")]),t._v(" "),n("h4",{attrs:{id:"localdatetime-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#localdatetime-2"}},[t._v("#")]),t._v(" LocalDateTime")]),t._v(" "),n("p",[t._v("创建和获取与 LocalDate 相似，不再赘述。")]),t._v(" "),n("h4",{attrs:{id:"格式化"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#格式化"}},[t._v("#")]),t._v(" 格式化")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("LocalDate 转 String：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),t._v(" localDate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("now")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// BASIC_ISO_DATE yyyyMMdd")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s1 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateTimeFormatter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BASIC_ISO_DATE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ISO_LOCAL_DATE yyyy-MM-dd")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateTimeFormatter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ISO_LOCAL_DATE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateTimeFormatter")]),t._v(" dateTimeFormatter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateTimeFormatter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofPattern")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"dd/MM/yyyy"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" s3 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" localDate"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("format")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dateTimeFormatter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("String 转 LocalDate：")]),t._v(" "),n("div",{staticClass:"language-java extra-class"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),t._v(" date "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"20200212"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateTimeFormatter")]),t._v(" dateTimeFormatter "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateTimeFormatter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("ofPattern")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yyyyMMdd"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),t._v(" localDate "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("DateTimeFormatter")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("BASIC_ISO_DATE"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),t._v(" localDate2 "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LocalDate")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("parse")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("date"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dateTimeFormatter"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])]),t._v(" "),n("h3",{attrs:{id:"optional-类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#optional-类"}},[t._v("#")]),t._v(" Optional 类")]),t._v(" "),n("p",[t._v("Optional 类(java.util.Optional) 是一个容器类，代表一个值存在或不存在，原来用 null 表示一个值不存在，现在 Optional 可以更好的表达这个概念。并且可以避免空指针异常。")]),t._v(" "),n("p",[t._v("常用方法：")]),t._v(" "),n("ul",[n("li",[t._v("Optional.of(T t) : 创建一个 Optional 实例；")]),t._v(" "),n("li",[t._v("Optional.empty() : 创建一个空的 Optional 实例；")]),t._v(" "),n("li",[t._v("Optional.ofNullable(T t):若 t 不为 null,创建 Optional 实例,否则创建空实例；")]),t._v(" "),n("li",[t._v("isPresent() : 判断是否包含值；")]),t._v(" "),n("li",[t._v("get()：如果调用对象包含值，返回该值，否则抛出异常；")]),t._v(" "),n("li",[t._v("orElse(T t) : 如果调用对象包含值，返回该值，否则返回 t；")]),t._v(" "),n("li",[t._v("orElseGet(Supplier s) :如果调用对象包含值，返回该值，否则返回 s 获取的值；")]),t._v(" "),n("li",[t._v("map(Function f): 如果有值对其处理，并返回处理后的 Optional，否则返回 Optional.empty()；")]),t._v(" "),n("li",[t._v("flatMap(Function mapper):与 map 类似，要求返回值必须是 Optional。")])]),t._v(" "),n("h3",{attrs:{id:"stream-api"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#stream-api"}},[t._v("#")]),t._v(" Stream API")]),t._v(" "),n("p",[t._v("Stream 是 Java8 的新特性之一，从名字看出来，它的含义是流，所谓的流就是一个数据渠道，可以用于操作集合所生成的元素序列。 实际上不光是集合，包括数组、文件等，只要是可以转换成流，我们都可以借助流式处理，类似于我们写 SQL 语句一样对其进行操作。")]),t._v(" "),n("p",[n("strong",[t._v("特点：")])]),t._v(" "),n("ol",[n("li",[t._v("Stream 自己不会存储元素。")]),t._v(" "),n("li",[t._v("Stream 不会改变源对象。")]),t._v(" "),n("li",[t._v("Stream 操作是延时执行的，这意味着它们会等到需要结果时才执行。")])]),t._v(" "),n("p",[n("strong",[t._v("流式处理：")])]),t._v(" "),n("p",[t._v("Stream 的流式处理可以分为三个部分：转换成流、中间操作、终端操作，具体例子：")]),t._v(" "),n("p",[n("code",[t._v("List userIds = userLists.stream().map(UserDO::getId).collect(Collectors.toList());")])]),t._v(" "),n("p",[t._v("stream 语句将 userLists 集合转换成了一个流，map 为中间操作，通过函数式表达式获取 user 的 Id，最后通过终端操作将其转换成一个 list 集合返回。")]),t._v(" "),n("p",[t._v("创建流的方式：")]),t._v(" "),n("ol",[n("li",[t._v(".stream()/.parallelStream()；")]),t._v(" "),n("li",[t._v("Arrays.stream()；")]),t._v(" "),n("li",[t._v('Steam.of("123","456")；')])]),t._v(" "),n("p",[t._v("中间操作与结束操作：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(352),alt:"image-20200212211912365"}})]),t._v(" "),n("p",[n("strong",[t._v("流水线原理：")])]),t._v(" "),n("ul",[n("li",[t._v("操作的记录")])]),t._v(" "),n("p",[t._v("注意，这里的操作是指中间操作，Stream 中会使用 Stage 概念来描述一个完整的操作，并用某种实例化后的 PipelineHelper 来代表 Stage，将具有先后顺序的各个 Stage 连到一起，就构成了整个流水线，其中 Stream 相关类和接口的继承关系如上图所示。")]),t._v(" "),n("p",[t._v("Stream 流水线组织结构示意图如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(353),alt:"image-20200212214032084"}})]),t._v(" "),n("p",[t._v("通过 Collection.stream()方法得到 Head，也就是 stage0，紧接着调用一系列中间操作，不断产生新的 Stream，这些 Stream 对象以双向链表的形式组织在一起，构成整个流水线，由于每个 Stage 都记录了前一个 Stage 和本次的操作以及回调函数，依靠这种结构就能建立起对数据源的所有操作。")]),t._v(" "),n("ul",[n("li",[t._v("操作的叠加")])]),t._v(" "),n("p",[t._v("现在我们知道 Stream()是如何记录每一步的操作了，要想让流水线将所有的操作叠加在一起，还需要有一种协议来协调相邻的 Stage 之间的关系。这个协议就是 Sink 接口，Sink 接口方法如下：")]),t._v(" "),n("p",[n("img",{attrs:{src:s(354),alt:"image-20200212214312111"}})]),t._v(" "),n("p",[t._v("有了此协议，相邻 Stage 之间调用就很方便了，每个 Stage 都会将自己的操作封装到一个 Sink 里，前一个 Stage 只需调用后一个 Stage 的 accept()方法即可，并不需要知道内部是如何处理的。对于短路操作，也要实现 cancellationRequested()。"),n("strong",[t._v("实际上 Stream API 内部实现的本质，就是如何重载 Sink 的这四个接口方法。")])]),t._v(" "),n("ul",[n("li",[t._v("执行结果的存放")])]),t._v(" "),n("p",[n("img",{attrs:{src:s(355),alt:"image-20200212214438029"}})]),t._v(" "),n("ol",[n("li",[n("p",[t._v("对于表中返回 boolean 或者 Optional 的操作（Optional 是存放 一个 值的容器）的操作，由于值返回一个值，只需要在对应的 Sink 中记录这个值，等到执行结束时返回就可以了。")])]),t._v(" "),n("li",[n("p",[t._v("对于归约操作，最终结果放在用户调用时指定的容器中（容器类型通过收集器指定）。collect(), reduce(), max(), min()都是归约操作，虽然 max()和 min()也是返回一个 Optional，但事实上底层是通过调用 reduce()方法实现的。")])]),t._v(" "),n("li",[n("p",[t._v("对于返回是数组的情况，毫无疑问的结果会放在数组当中。这么说当然是对的，但在最终返回数组之前，结果其实是存储在一种叫做 Node 的数据结构中的。Node 是一种多叉树结构，元素存储在树的叶子当中，并且一个叶子节点可以存放多个元素。这样做是为了并行执行方便。")])])]),t._v(" "),n("h3",{attrs:{id:"其他"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#其他"}},[t._v("#")]),t._v(" 其他")]),t._v(" "),n("ol",[n("li",[n("p",[t._v("HashMap 前后变化")]),t._v(" "),n("p",[t._v("链表长度大于 8 时采取红黑树的结构存储。")])]),t._v(" "),n("li",[n("p",[t._v("ConcurrentHashMap")]),t._v(" "),n("p",[t._v("从分段锁改为 CAS+Synchronized。")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);