(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{417:function(t,s,a){"use strict";a.r(s);var n=a(42),r=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"操作系统"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#操作系统"}},[t._v("#")]),t._v(" 操作系统")]),t._v(" "),a("h2",{attrs:{id:"进程和线程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程和线程的区别"}},[t._v("#")]),t._v(" 进程和线程的区别")]),t._v(" "),a("ol",[a("li",[t._v("进程是资源的分配和调度的一个独立单元，而线程是 CPU 调度的基本单元。")]),t._v(" "),a("li",[t._v("同一个进程中可以包括多个线程，并且线程共享整个进程的资源（寄存器、堆栈、上下文），一个进程至少包括一个线程。")]),t._v(" "),a("li",[t._v("进程的创建调用 fork 或者 vfork，而线程的创建调用 pthread_create，进程结束后它拥有的所有线程都将销毁，而线程的结束不会影响同个进程中的其他线程的结束。")]),t._v(" "),a("li",[t._v("线程是轻量级的进程，它的创建和销毁所需要的时间比进程小很多，所有操作系统中的执行功能都是创建线程去完成的。")]),t._v(" "),a("li",[t._v("线程中执行时一般都要进行同步和互斥，因为他们共享同一进程的所有资源。")]),t._v(" "),a("li",[t._v("线程有自己的私有属性 TCB，线程 id，寄存器、硬件上下文，而进程也有自己的私有属性进程控制块 PCB，这些私有属性是不被共享的，用来标示一个进程或一个线程的标志。")])]),t._v(" "),a("h2",{attrs:{id:"线程和协程的区别"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程和协程的区别"}},[t._v("#")]),t._v(" 线程和协程的区别")]),t._v(" "),a("p",[a("strong",[t._v("协程是一种用户态的轻量级线程，")]),t._v(" 协程的调度完全由用户控制。")]),t._v(" "),a("ol",[a("li",[t._v("一个线程可以多个协程，一个进程也可以单独拥有多个协程，这样 python 中则能使用多核 CPU。")]),t._v(" "),a("li",[t._v("线程进程都是同步机制，而协程则是异步。")]),t._v(" "),a("li",[t._v("协程能保留上一次调用时的状态，每次过程重入时，就相当于进入上一次调用的状态。")])]),t._v(" "),a("h2",{attrs:{id:"进程间通信的方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程间通信的方式"}},[t._v("#")]),t._v(" 进程间通信的方式")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("管道")]),t._v(" "),a("p",[t._v("速度慢，容量有限，只有父子进程能通讯。")])]),t._v(" "),a("li",[a("p",[t._v("FIFO")]),t._v(" "),a("p",[t._v("FIFO，也称为命名管道，它是一种文件类型。任何进程间都能通讯，但速度慢。")]),t._v(" "),a("p",[t._v("特点：")]),t._v(" "),a("p",[t._v("1）FIFO 可以在无关的进程之间交换数据，与无名管道不同。")]),t._v(" "),a("p",[t._v("2）FIFO 有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中。")])]),t._v(" "),a("li",[a("p",[t._v("消息队列")]),t._v(" "),a("p",[t._v("容量受到系统限制，且要注意第一次读的时候，要考虑上一次没有读完数据的问题。")])]),t._v(" "),a("li",[a("p",[t._v("信号量")]),t._v(" "),a("p",[t._v("不能传递复杂消息，只能用来同步。")])]),t._v(" "),a("li",[a("p",[t._v("Socket")]),t._v(" "),a("p",[t._v("使用网络进行交互。")])]),t._v(" "),a("li",[a("p",[t._v("共享内存区")]),t._v(" "),a("p",[t._v("共享内存是分配一块能被其他进程访问的内存，实现是通过将内存映射到共享它的进程的地址空间，使这些进程间的数据传送不再涉及内核，即进程间通信不需要通过进入内核的系统调用实现。共享内存几乎没有上限，它也不局限于父子进程，因为内存是共享的，不存在单向的限制；最大的问题就是需要应用程序自己实现互斥。")]),t._v(" "),a("p",[t._v("最大优点：数据赋值只需 2 次，一次是从输入文件到共享内存区，一次是从共享内存区到输出文件。其他的通信方式需要四次：服务器将输入文件读入自己的进程空间，再从自己的进程空间写入管道/消息队列等；客户进程从管道/消息队列读出数据到自己的进程空间，最后输出到用户指定的文件中。因此共享内存是"),a("strong",[t._v("最快")]),t._v("的进程间通信方式，因为它不涉及内存的交互，所以效率很高。")])])]),t._v(" "),a("h2",{attrs:{id:"线程共享与独占的资源"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#线程共享与独占的资源"}},[t._v("#")]),t._v(" 线程共享与独占的资源")]),t._v(" "),a("h3",{attrs:{id:"共享内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#共享内容"}},[t._v("#")]),t._v(" 共享内容")]),t._v(" "),a("p",[t._v("代码段、数据段、堆空间、进程打开的文件描述符、进程的当前目录以及进程的用户 ID 和组 ID。")]),t._v(" "),a("h3",{attrs:{id:"独占内容"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#独占内容"}},[t._v("#")]),t._v(" 独占内容")]),t._v(" "),a("p",[t._v("栈、线程 ID、寄存器的值、错误返回码以及线程的信号屏蔽码。")]),t._v(" "),a("h2",{attrs:{id:"作业调度算法"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#作业调度算法"}},[t._v("#")]),t._v(" 作业调度算法")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("先来先服务调度算法")]),t._v(" "),a("p",[t._v("按作业到达的先后次序进行调度。")])]),t._v(" "),a("li",[a("p",[t._v("短作业优先调度算法")]),t._v(" "),a("p",[t._v("优先调度运行时间最短的作业。")])]),t._v(" "),a("li",[a("p",[t._v("响应比高者优先调度算法")]),t._v(" "),a("p",[t._v("响应比 R=1+W/T，W 为作业在后备状态队列中的等待时间，T 为该作业估计需要的执行时间。")])]),t._v(" "),a("li",[a("p",[t._v("轮转法")]),t._v(" "),a("p",[t._v("将 CPU 的处理时间分成固定大小的时间片，时间片长度 q 的选择是根据系统对相应时间的要求 R 和就绪队列中所允许的最大进程数 Nmax 确定的：q=R/Nmax。")])]),t._v(" "),a("li",[a("p",[t._v("优先级法")]),t._v(" "),a("p",[t._v("根据事先设置好的优先级进行调度。")])])]),t._v(" "),a("h2",{attrs:{id:"进程分配的内存空间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程分配的内存空间"}},[t._v("#")]),t._v(" 进程分配的内存空间")]),t._v(" "),a("ul",[a("li",[t._v("栈区：由编译器自动分配和释放，存放函数的参数值，局部变量的值等。")]),t._v(" "),a("li",[t._v("堆区：一般有程序员分配和释放，若程序员不释放，程序结束后可能有 OS 回收。线程共享。")]),t._v(" "),a("li",[t._v("全局区（静态区 static）：全局变量和静态变量存储在这一区域，初始化的全局变量和静态变量在这一区域，未初始化的全局变量和未初始化的静态变量在相邻的另一区域。程序结束后由系统释放。")]),t._v(" "),a("li",[t._v("文字常量区：常量字符串存放在这一区域。程序结束后由系统释放。")]),t._v(" "),a("li",[t._v("程序代码区：存放函数体的二进制代码。")])]),t._v(" "),a("h2",{attrs:{id:"存储管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#存储管理"}},[t._v("#")]),t._v(" 存储管理")]),t._v(" "),a("p",[t._v("主要有页式管理、段式管理和段页式管理。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("页式管理")]),t._v(" "),a("p",[t._v("基本原理是将各进程的虚拟空间划分为若干个长度相等的页。把内存空间按页的大小划分为片或者页面，然后把页式虚拟地址与内存地址建立一一对应的页表，并用相应的硬件地址转换机构来解决离散地址变换问题。")]),t._v(" "),a("p",[a("strong",[t._v("优点：")]),t._v(" 没有外碎片，每个内碎片不超过页的大小。")]),t._v(" "),a("p",[a("strong",[t._v("缺点：")]),t._v(" 程序全部装入内存，要求有相应的硬件支持，如地址变换机构缺页中断的产生和选择淘汰页面等都要求有相应的硬件支持。增加了机器成本和系统开销。")]),t._v(" "),a("blockquote",[a("p",[t._v("快表")]),t._v(" "),a("p",[t._v("CPU 每次要存取一个数据，都要两次访问内存（访问页表、访问实际物理地址）。为提高地址变换速度，增设一个具有并行查询能力的特殊高速缓冲存储器，称为“联想存储器”或“快表”，存放当前访问的页表项。")])])]),t._v(" "),a("li",[a("p",[t._v("段式管理")]),t._v(" "),a("p",[t._v("基本思想是把程序按内容或过程函数关系分成段，每段有自己的名字。一个用户作业或者进程所包含的段对应一个二维线性虚拟空间，也就是一个二维虚拟存储器。段式管理程序以段为单位分配内存，然后通过地址映射机构把段式虚拟地址转换为实际内存物理地址。")]),t._v(" "),a("p",[a("strong",[t._v("优点：")])]),t._v(" "),a("p",[t._v("1）具有逻辑独立性，易于维护，也便于多道程序共享。")]),t._v(" "),a("p",[t._v("2）段长可以动态改变，允许自由调度。")]),t._v(" "),a("p",[t._v("3）方便编程。")]),t._v(" "),a("p",[a("strong",[t._v("缺点：")]),t._v(" 会产生碎片。")])]),t._v(" "),a("li",[a("p",[t._v("段页式管理")]),t._v(" "),a("p",[t._v("先分段，后分页。系统必须为每个作业或者进程建立一张段表以管理内存分配与释放、缺段处理等。另外由于一个段又被划分为若干个页，每个段必须建立一张页表以把段中的虚页变换为内存中的实际页面。显然与页式管理时相同，页表也要有相应的实现缺页中断处理和页面保护等功能的表项。")]),t._v(" "),a("p",[t._v("段页式管理是段式管理和页式管理相结合而成，具有两者的优点。缺点是，由于管理软件的增加，复杂性和开销也增加。另外需要的硬件以及占用的内存也有所增加，使得执行速度下降。")])])]),t._v(" "),a("h2",{attrs:{id:"页面置换算法-内存调度"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#页面置换算法-内存调度"}},[t._v("#")]),t._v(" 页面置换算法/内存调度")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("随机淘汰算法")])]),t._v(" "),a("li",[a("p",[t._v("轮转法")])]),t._v(" "),a("li",[a("p",[t._v("最佳置换算法（OPT）")]),t._v(" "),a("p",[t._v("这是一种理想情况下的页面置换算法，但实际上是不可能实现的。该算法的基本思想是：发生缺页时，有些页面在内存中，其中有一页将很快被访问（也包含紧接着的下一条指令的那页），而其他页面则可能要到 10、100 或者 1000 条指令后才会被访问，每个页面都可 [1] 以用在该页面首次被访问前所要执行的指令数进行标记。最佳页面置换算法只是简单地规定：标记最大的页应该被置换。")])]),t._v(" "),a("li",[a("p",[t._v("先进先出置换算法（FIFO）")]),t._v(" "),a("p",[t._v("最简单的页面置换算法是先入先出（FIFO）法。这种算法的实质是，总是选择在主存中停留时间最长（即最老）的一页置换，即先进入内存的页，先退出内存。理由是：最早调入内存的页，其不再被使用的可能性比刚调入内存的可能性大。")])]),t._v(" "),a("li",[a("p",[t._v("最近最久未使用算法（LRU）")]),t._v(" "),a("p",[t._v("它的实质是，当需要置换一页时，选择在之前一段时间里最久没有使用过的页面予以置换。这种算法就称为最久未使用算法。java 使用 LinkedList 实现 LRU 算法：")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n * className: LRUCache\n * description: 用双向链表实现LRU\n * 链表尾表示最近被访问的元素，越靠近链表头表示越早之前被访问的元素.\n *\n * @author lamar\n * @version 1.0\n * @date 2020/2/29 22:52\n */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUCache")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LRUCache")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("cache "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("LinkedList")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" capacity"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                result "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加到链表尾部")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("put")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 遍历，如果存在，直接删除")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Iterator")]),a("span",{pre:!0,attrs:{class:"token generics"}},[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" iterator "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("iterator")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("hasNext")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" node "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("next")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("node"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n                iterator"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("remove")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n                "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("break")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 找不到且容量已满，删除链表头部")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("capacity "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("removeFirst")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 添加到链表尾部")]),t._v("\n        cache"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n        "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Node")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("key "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n            "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])])]),t._v(" "),a("h2",{attrs:{id:"死锁条件与解决方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁条件与解决方式"}},[t._v("#")]),t._v(" 死锁条件与解决方式")]),t._v(" "),a("h3",{attrs:{id:"死锁概念及产生原理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁概念及产生原理"}},[t._v("#")]),t._v(" 死锁概念及产生原理")]),t._v(" "),a("p",[a("strong",[t._v("概念：")]),t._v(" 多个并发进程因争夺系统资源而产生相互等待的现象。")]),t._v(" "),a("p",[a("strong",[t._v("原理：")]),t._v(" 当一组进程中的每个进程都在等待某个事件发生，而只有这组进程中的其他进程才能触发该事件，这就称这组进程发生了死锁。")]),t._v(" "),a("p",[a("strong",[t._v("本质原因：")])]),t._v(" "),a("ul",[a("li",[a("p",[t._v("系统资源有限")])]),t._v(" "),a("li",[a("p",[t._v("进程推进顺序不合理")])])]),t._v(" "),a("h3",{attrs:{id:"必要条件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#必要条件"}},[t._v("#")]),t._v(" 必要条件")]),t._v(" "),a("ol",[a("li",[t._v("互斥条件：一个资源每次只能被一个进程使用。")]),t._v(" "),a("li",[t._v("请求与保持条件：一个进程因请求资源而阻塞时，对已获得的资源保持不放。")]),t._v(" "),a("li",[t._v("不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。")]),t._v(" "),a("li",[t._v("循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。")])]),t._v(" "),a("h3",{attrs:{id:"死锁预防"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁预防"}},[t._v("#")]),t._v(" 死锁预防")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("破坏请求与保持条件")]),t._v(" "),a("p",[t._v("所有的进程在开始运行之前，必须一次性地申请其在整个运行过程中所需要的全部资源。")])]),t._v(" "),a("li",[a("p",[t._v("破坏不可剥夺条件")]),t._v(" "),a("p",[t._v("当一个已经持有了一些资源的进程在提出新的资源请求没有得到满足时，它必须释放已经保持的所有资源，待以后需要使用的时候再重新申请。会很大程度上影响系统吞吐量。")])]),t._v(" "),a("li",[a("p",[t._v("破坏循环等待条件")]),t._v(" "),a("p",[t._v("可以通过定义资源类型的线性顺序来预防，可将每个资源编号，当一个进程占有编号为 i 的资源时，那么它下一次申请资源只能申请编号大于 i 的资源。")])])]),t._v(" "),a("h3",{attrs:{id:"死锁避免"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁避免"}},[t._v("#")]),t._v(" 死锁避免")]),t._v(" "),a("p",[t._v("死锁避免是利用额外的检验信息，在分配资源时判断是否会出现死锁，只在不会出现死锁的情况下才分配资源。")]),t._v(" "),a("p",[t._v("两种避免办法：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("如果一个进程的请求会导致死锁，则不启动该进程。")])]),t._v(" "),a("li",[a("p",[t._v("如果一个进程的增加资源请求会导致死锁，则拒绝该申请。")])])]),t._v(" "),a("p",[t._v("避免死锁的具体实现通常利用银行家算法。")]),t._v(" "),a("h3",{attrs:{id:"死锁的检测与解除"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#死锁的检测与解除"}},[t._v("#")]),t._v(" 死锁的检测与解除")]),t._v(" "),a("p",[t._v("常用的接触死锁的方法：")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("抢占资源：从一个或多个进程中抢占足够数量的资源分配给死锁进程，以解除死锁状态。")])]),t._v(" "),a("li",[a("p",[t._v("终止（或撤销）进程：终止或撤销系统中的一个或多个死锁进程，直至打破死锁状态。")])])]),t._v(" "),a("h2",{attrs:{id:"fork-系统调用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#fork-系统调用"}},[t._v("#")]),t._v(" fork()系统调用")]),t._v(" "),a("p",[t._v("fork()的作用就是创建一个该进程下的子进程，在其 exit 或 exec 之前，和他共享代码。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("fork 系统调用之后，父进程和子进程交替执行，并且它们处于不同空间中。")])]),t._v(" "),a("li",[a("p",[t._v("fork()函数的一次调用返回 2 次返回，此时二个进程处于独立的空间，它们各自执行着自己的东西,不产生冲突，所以返回 2 次。创建成功后，对于父进程来说是返回子进程的 ID，而对于子进程来说就是返回 0。而至于是先子进程还是父进程先执行,这没有确切的规定,是随机的。创建失败返回-1。")])]),t._v(" "),a("li",[a("p",[t._v("fork()的子执行过程在 fork()之后并不是从头开始,因为在 fork()之前,父进程已经为子进程搭建好了运行环境了。")])])]),t._v(" "),a("h3",{attrs:{id:"exec"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#exec"}},[t._v("#")]),t._v(" exec()")]),t._v(" "),a("p",[t._v("fork 会创建一个子进程。"),a("strong",[t._v("子进程的是父进程的副本")]),t._v("。")]),t._v(" "),a("p",[t._v("exec 函数的作用就是："),a("strong",[t._v("装载一个新的程序")]),t._v("（可执行映像）覆盖"),a("strong",[t._v("当前进程")]),t._v("内存空间中的映像，"),a("strong",[t._v("从而执行不同的任务")]),t._v("。")]),t._v(" "),a("ul",[a("li",[t._v("exec 系列函数在执行时会"),a("strong",[t._v("直接替换掉当前进程的地址空间")]),t._v("。")])]),t._v(" "),a("h2",{attrs:{id:"copy-on-write"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#copy-on-write"}},[t._v("#")]),t._v(" Copy-On-Write")]),t._v(" "),a("p",[t._v("写时复制， 是一种计算机程序设计领域的优化策略，多个调用者可以请求相同的资源，只有修改时，系统会复制一份副本给要修改的调用者，而其他调用者看到的仍是最初的资源。")]),t._v(" "),a("h3",{attrs:{id:"联系-fork"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系-fork"}},[t._v("#")]),t._v(" 联系 fork()")]),t._v(" "),a("p",[t._v("如果按"),a("strong",[t._v("传统")]),t._v("的做法，会"),a("strong",[t._v("直接")]),t._v("将父进程的数据拷贝到子进程中，拷贝完之后，父进程和子进程之间的数据段和堆栈是"),a("strong",[t._v("相互独立的")]),t._v("。但是子进程往往会执行自己想要实现的功能，从而清空父进程的数据，导致拷贝失效。于是就有了 COW。")]),t._v(" "),a("ul",[a("li",[t._v("fork 创建出的子进程，"),a("strong",[t._v("与父进程共享内存空间")]),t._v("。也就是说，如果子进程"),a("strong",[t._v("不对内存空间进行写入操作的话，内存空间中的数据并不会复制给子进程")]),t._v("，这样创建子进程的速度就很快了！(不用复制，直接引用父进程的物理空间)。")]),t._v(" "),a("li",[t._v("并且如果在 fork 函数返回之后，子进程"),a("strong",[t._v("第一时间")]),t._v("exec 一个新的可执行映像，那么也不会浪费时间和内存空间了。")])]),t._v(" "),a("h3",{attrs:{id:"优点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#优点"}},[t._v("#")]),t._v(" 优点")]),t._v(" "),a("ul",[a("li",[t._v("COW 技术可"),a("strong",[t._v("减少")]),t._v("分配和复制大量资源时带来的"),a("strong",[t._v("瞬间延时")]),t._v("。")]),t._v(" "),a("li",[t._v("COW 技术可减少"),a("strong",[t._v("不必要的资源分配")]),t._v("。比如 fork 进程时，并不是所有的页面都需要复制，父进程的"),a("strong",[t._v("代码段和只读数据段都不被允许修改，所以无需复制")]),t._v("。")])]),t._v(" "),a("h3",{attrs:{id:"缺点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缺点"}},[t._v("#")]),t._v(" 缺点")]),t._v(" "),a("p",[t._v("如果在 fork()之后，父子进程都还需要继续进行写操作，"),a("strong",[t._v("那么会产生大量的分页错误(页异常中断 page-fault)")]),t._v("，这样就得不偿失。")]),t._v(" "),a("h2",{attrs:{id:"僵尸进程和孤儿进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#僵尸进程和孤儿进程"}},[t._v("#")]),t._v(" 僵尸进程和孤儿进程")]),t._v(" "),a("h3",{attrs:{id:"僵尸进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#僵尸进程"}},[t._v("#")]),t._v(" 僵尸进程")]),t._v(" "),a("p",[t._v("创建子进程后，如果子进程比父进程早结束，而且父进程迟迟没有结束，那么子进程就会进入一个 Z 状态——僵尸状态，并且占用系统资源。僵尸状态对操作系统是有害的，kill -9 也无法处理，只能等父进程来处理。")]),t._v(" "),a("p",[t._v("解决方法：")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("进程等待")]),t._v(" "),a("p",[t._v("让父进程等待子进程，子进程工作完父进程再执行工作。")])]),t._v(" "),a("li",[a("p",[t._v("托付给 Init 进程")]),t._v(" "),a("p",[t._v("用子进程再创建一个子进程，此时子进程就成了 "),a("strong",[t._v("子进程的子进程")]),t._v(" 的父进程，然后让子进程结束，那么 "),a("strong",[t._v("子进程的子进程")]),t._v(" 接受本应该子进程接受的任务，而且 "),a("strong",[t._v("子进程的子进程")]),t._v(" 此时成了孤儿进程，他的生死父进程也不会过问，交给 1 号进程 init 来解决。")])])]),t._v(" "),a("h3",{attrs:{id:"孤儿进程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#孤儿进程"}},[t._v("#")]),t._v(" 孤儿进程")]),t._v(" "),a("p",[t._v("子进程还在世的时候父进程却结束了，对系统无害。init 进程会收养孤儿进程，孤儿进程结束时第一时间回收他们的退出信息，保证他们不一直成为僵尸进程。")]),t._v(" "),a("h2",{attrs:{id:"系统调用、异常和中断"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#系统调用、异常和中断"}},[t._v("#")]),t._v(" 系统调用、异常和中断")]),t._v(" "),a("ul",[a("li",[t._v("系统调用：应用程序主动向操作系统发出的服务请求。")]),t._v(" "),a("li",[t._v("异常：非法指令或其他原因导致当前指令执行失败后的处理请求。")]),t._v(" "),a("li",[t._v("中断：来自硬件设备的处理请求。")])]),t._v(" "),a("p",[t._v("无论任何一种都可能发生用户态到内核态之间的转换。")]),t._v(" "),a("h2",{attrs:{id:"用户态和内核态"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#用户态和内核态"}},[t._v("#")]),t._v(" 用户态和内核态")]),t._v(" "),a("p",[t._v("内核态与用户态是操作系统的两种运行级别，当程序运行在 3 级特权级上时，就可以称之为运行在用户态。"),a("strong",[t._v("因为这是最低特权级，是普通的用户进程运行的特权级，大部分用户直接面对的程序都是运行在用户态，在其需要操作系统帮助完成某些它没有权力和能力完成的工作时就会切换到内核态；")]),t._v("\n当程序运行在 0 级特权级上时，就可以称之为运行在内核态。")]),t._v(" "),a("p",[a("strong",[t._v("区别：")])]),t._v(" "),a("ul",[a("li",[t._v("处于用户态执行时，进程所能访问的内存空间和对象受到限制，其所处于占有的处理器是可被抢占的。")]),t._v(" "),a("li",[t._v("处于内核态执行时，则能访问所有的内存空间和对象，且所占有的处理器是不允许被抢占的。")])]),t._v(" "),a("p",[t._v("这个状态，连最无情的 kill -9 也无法处理，只能等父进程来处理。")])])}),[],!1,null,null,null);s.default=r.exports}}]);