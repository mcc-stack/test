(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{393:function(t,s,a){t.exports=a.p+"assets/img/image-20200213223116000.e5de0931.png"},394:function(t,s,a){t.exports=a.p+"assets/img/image-20200214002028329.3708ed68.png"},395:function(t,s,a){t.exports=a.p+"assets/img/image-20200214003013275.58f3c167.png"},396:function(t,s,a){t.exports=a.p+"assets/img/image-20200214003031201.f97a9e02.png"},397:function(t,s,a){t.exports=a.p+"assets/img/image-20200214003048549.e832e841.png"},427:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("h1",{attrs:{id:"nginx"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx"}},[t._v("#")]),t._v(" Nginx")]),t._v(" "),n("p",[t._v("Nginx 是一个高性能的 HTTP 和反向代理服务器，及电子邮件代理服务器。")]),t._v(" "),n("h2",{attrs:{id:"功能"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#功能"}},[t._v("#")]),t._v(" 功能")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("反向代理")])]),t._v(" "),n("li",[n("p",[t._v("负载均衡")])]),t._v(" "),n("li",[n("p",[t._v("动静分离")])])]),t._v(" "),n("h2",{attrs:{id:"常用命令"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#常用命令"}},[t._v("#")]),t._v(" 常用命令")]),t._v(" "),n("p",[t._v("启动命令： "),n("code",[t._v("./sbin/nginx -c conf/nginx.conf")])]),t._v(" "),n("p",[t._v("停止命令："),n("code",[t._v("./sbin/nginx -s stop")])]),t._v(" "),n("p",[t._v("​ "),n("code",[t._v("./sbin/nginx -s quit")])]),t._v(" "),n("p",[t._v("重载配置："),n("code",[t._v("./sbin/nginx -s reload")]),t._v("(平滑重启)")]),t._v(" "),n("h2",{attrs:{id:"进程模型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#进程模型"}},[t._v("#")]),t._v(" 进程模型")]),t._v(" "),n("p",[n("img",{attrs:{src:a(393),alt:"image-20200213223116000"}})]),t._v(" "),n("p",[t._v("Nginx 启动时分为单进程模式和多进程模式，在多进程模式下，有一个 master 进程多个 worker 进程，其中，master 进程负责信号处理以及 worker 进程的管理；worker 进程负责处理具体的请求。Master 与 Worker 中间使用 epoll 多路复用来确保非阻塞。")]),t._v(" "),n("p",[t._v("基于此，Nginx 得以无缝重启，在重启时，master 并不会重启，只是更换了 Worker 进程（Worker 是单线程的）。")]),t._v(" "),n("h2",{attrs:{id:"nginx-处理-http-请求的过程"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#nginx-处理-http-请求的过程"}},[t._v("#")]),t._v(" Nginx 处理 Http 请求的过程")]),t._v(" "),n("p",[t._v("Nginx 使用 Reactor 模式。主进程循环等待操作系统发出准备事件的信号，这样数据就可以从套接字读取，在该实例中读取到缓冲区并进行处理。单个线程可以提供数万个并发连接。")]),t._v(" "),n("h3",{attrs:{id:"reactor"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#reactor"}},[t._v("#")]),t._v(" Reactor")]),t._v(" "),n("p",[t._v("Reactor 模式是事件驱动的一种实现方式，处理多个客户端并发的向服务端请求服务的场景。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(394),alt:"image-20200214002028329"}})]),t._v(" "),n("p",[t._v("这是最简单的单 Reactor 单线程模型。Reactor 线程是个多面手，负责多路分离套接字，Accept 新连接，并分派请求到 Handler 处理器中。")]),t._v(" "),n("h2",{attrs:{id:"正反向代理"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#正反向代理"}},[t._v("#")]),t._v(" 正反向代理")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("正向代理")]),t._v(" "),n("p",[t._v("正向代理就是平时说的代理（比如 Shadowsocks 就是正向代理），是指 Nginx 代理服务器受"),n("strong",[t._v("客户端")]),t._v("委托代理客户端，转发请求，并将从服务端获得的响应返回给客户端。")])]),t._v(" "),n("li",[n("p",[t._v("反向代理")]),t._v(" "),n("p",[t._v("反向代理是指 Nginx 代理服务器受"),n("strong",[t._v("服务端")]),t._v("的委托代理服务端，作为集群的 web 节点，反向代理一般和负载均衡配合使用。反向代理服务器可以隐藏源服务器的存在和特征，比较安全。")])])]),t._v(" "),n("h2",{attrs:{id:"负载均衡"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#负载均衡"}},[t._v("#")]),t._v(" 负载均衡")]),t._v(" "),n("p",[t._v("负载均衡的实现必须依赖于反向代理，Nginx 的负载均衡策略有两种：内置策略和扩展策略。")]),t._v(" "),n("p",[t._v("内置策略：")]),t._v(" "),n("ul",[n("li",[t._v("轮询：将请求依次轮询发给每个服务器。")]),t._v(" "),n("li",[t._v("最少连接：将请求发送给持有最少活动链接的服务器。（least_conn)")]),t._v(" "),n("li",[t._v("IP 哈希：通过哈希函数决定请求发送给哪个服务器。（ip_hash）")]),t._v(" "),n("li",[t._v("权重：服务器的权重越高，处理请求的概率越大。")])]),t._v(" "),n("h2",{attrs:{id:"配置文件结构"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#配置文件结构"}},[t._v("#")]),t._v(" 配置文件结构")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("全局块")]),t._v(" "),n("p",[t._v("一般配置影响 Nginx 全局的指令。一般配置用户组，日志存放路径，pid 存放路径等。")])]),t._v(" "),n("li",[n("p",[t._v("events 块")]),t._v(" "),n("p",[t._v("配置 Nginx 服务器与用户的网络连接。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("events "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    worker_connections  "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("http 块")]),t._v(" "),n("p",[t._v("可以嵌套多个 server 块，配置代理服务器，日志等。")]),t._v(" "),n("ul",[n("li",[n("p",[t._v("server 块")]),t._v(" "),n("p",[t._v("可以嵌套多个 location 块，配置代理服务器的相关参数。")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("upstream aaa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 反向代理")]),t._v("\n\tserver "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8080 "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("weight")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tserver "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("127.0")]),t._v(".0.1:8081 "),n("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("weight")]),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nserver"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tlisten "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\n\tlocation / "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tproxy_pass http://aaa"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v(".\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])])]),t._v(" "),n("li",[n("p",[t._v("location 块")]),t._v(" "),n("p",[t._v("配置请求路由和处理请求的页面或服务器。")])])])])]),t._v(" "),n("h2",{attrs:{id:"location-规则"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#location-规则"}},[t._v("#")]),t._v(" location 规则")]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("标识符")]),t._v(" "),n("th",[t._v("描述")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("=")]),t._v(" "),n("td",[n("strong",[t._v("精确匹配：")]),t._v(" 用于标准 uri 前，要求请求字符串和 uri 严格匹配。如果匹配成功就停止匹配，立即执行该 location 里面的请求。")])]),t._v(" "),n("tr",[n("td",[t._v("~")]),t._v(" "),n("td",[n("strong",[t._v("正则匹配：")]),t._v(" 用于正则 uri 前，表示 uri 里面包含正则，并且区分大小写。")])]),t._v(" "),n("tr",[n("td",[t._v("~*")]),t._v(" "),n("td",[n("strong",[t._v("正则匹配：")]),t._v(" 用于正则 uri 前，表示 uri 里面包含正则，不区分大小写。")])]),t._v(" "),n("tr",[n("td",[t._v("^~")]),t._v(" "),n("td",[n("strong",[t._v("非正则匹配：")]),t._v(" 用于标准 uri 前，Nginx 服务器匹配到前缀最多的 uri 后就结束，该模式匹配成功后，不会使用正则匹配。")])]),t._v(" "),n("tr",[n("td",[t._v("无")]),t._v(" "),n("td",[n("strong",[t._v("普通匹配（最长字符匹配）：")]),t._v(" 与 location 顺序无关，是按照匹配的长短来取匹配结果。若完全匹配，就停止匹配。")])])])]),t._v(" "),n("h3",{attrs:{id:"匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匹配"}},[t._v("#")]),t._v(" =匹配")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("location "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" /news/ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"test1"')]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" x.x.x.x/news/\ntest1\n")])])]),n("h3",{attrs:{id:"匹配-2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匹配-2"}},[t._v("#")]),t._v(" ~匹配")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("location ~ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test2'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nlocation ~ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("\\")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("htmL"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test3'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" x.x.x.x/index.html\ntest2\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" x.x.x.x/index.htmL\ntest3\n")])])]),n("h3",{attrs:{id:"匹配-3"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#匹配-3"}},[t._v("#")]),t._v(" ^~匹配")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("location ^~ /index/ "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test5'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" x.x.x.x/index/heihei\ntest5\n")])])]),n("h3",{attrs:{id:"普通匹配"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#普通匹配"}},[t._v("#")]),t._v(" 普通匹配")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("location / "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("echo")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test6'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("root"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("..")]),t._v("."),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("curl")]),t._v(" x.x.x.x\ntest6\n")])])]),n("h2",{attrs:{id:"rewrite-的使用"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#rewrite-的使用"}},[t._v("#")]),t._v(" Rewrite 的使用")]),t._v(" "),n("p",[t._v("基本语法："),n("code",[t._v("if(condition){...}")])]),t._v(" "),n("table",[n("thead",[n("tr",[n("th",[t._v("标记符号")]),t._v(" "),n("th",[t._v("说明")])])]),t._v(" "),n("tbody",[n("tr",[n("td",[t._v("last")]),t._v(" "),n("td",[t._v("终止在本 location 块中处理接收到的 URI，并将此处重写的 URI 作为新的 URI 使用其他 location 进行处理。（只是终止当前 location 的处理）")])]),t._v(" "),n("tr",[n("td",[t._v("break")]),t._v(" "),n("td",[t._v("将此处重写的 URI 作为一个新的 URI 在当前 location 中继续执行，并不会将新的 URI 转向其他 location。")])]),t._v(" "),n("tr",[n("td",[t._v("redirect")]),t._v(" "),n("td",[t._v("将重写后的 URI 返回个客户端，状态码是 302，表明临时重定向，主要用在 replacement 字符串不以“http://”，“ https://”或“ $scheme” 开头；")])]),t._v(" "),n("tr",[n("td",[t._v("permanent")]),t._v(" "),n("td",[t._v("将重写的 URI 返回客户端，状态码为 301，指明是永久重定向；")])])])]),t._v(" "),n("p",[t._v("例子：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("server "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    listen "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("80")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    server_name   abc.com"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    rewrite   ^/"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v(".*"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("    http://www.abc.com/"),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$1")]),t._v(" permanent"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 跳转到www.abc.com网址上")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("h2",{attrs:{id:"动静分离与-expires-缓存"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#动静分离与-expires-缓存"}},[t._v("#")]),t._v(" 动静分离与 Expires（缓存）")]),t._v(" "),n("p",[t._v("动静分离是让动态网站里的动态网页根据一定规则把不变的资源和经常变的资源区分开来，动静资源做好了拆分以后，我们就可以根据静态资源的特点将其做缓存操作，这就是网站静态化处理的核心思路。")]),t._v(" "),n("p",[t._v("以下代码同时配置了静态资源的访问与缓存策略：")]),t._v(" "),n("p",[n("img",{attrs:{src:a(395),alt:"image-20200214003013275"}})]),t._v(" "),n("h2",{attrs:{id:"跨域配置"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#跨域配置"}},[t._v("#")]),t._v(" 跨域配置")]),t._v(" "),n("p",[t._v("跨域的概念：")]),t._v(" "),n("p",[t._v("浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域。")]),t._v(" "),n("p",[t._v("参考配置代码：")]),t._v(" "),n("div",{staticClass:"language-shell extra-class"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("location /xxx-web "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tadd_header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Origin'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$http_origin")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tadd_header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Credentials'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'true'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tadd_header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Methods'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'GET, POST, OPTIONS'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tadd_header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Allow-Headers'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'DNT,web-token,app-token,Authorization,Accept,Origin,Keep-Alive,User-Agent,X-Mx-ReqToken,X-Data-Type,X-Auth-Token,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tadd_header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Expose-Headers'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Length,Content-Range'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$request_method")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'OPTIONS'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tadd_header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Access-Control-Max-Age'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("1728000")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tadd_header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Type'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'text/plain; charset=utf-8'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\tadd_header "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Content-Length'")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("return")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("204")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\troot   html"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tindex  index.html index.htm"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tproxy_pass http://127.0.0.1:8080"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tproxy_set_header Host "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$host")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tproxy_set_header X-Real-IP "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$remote_addr")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tproxy_set_header X-Forwarded-For "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$proxy_add_x_forwarded_for")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tproxy_set_header X-Forwarded-Proto "),n("span",{pre:!0,attrs:{class:"token variable"}},[t._v("$scheme")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\tproxy_connect_timeout "),n("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),n("ol",[n("li",[n("p",[t._v("Access-Control-Allow-Origin，这里使用变量 $http_origin 取得当前来源域。")])]),t._v(" "),n("li",[n("p",[t._v("Access-Control-Allow-Credentials，为 true 的时候指请求时可带上 Cookie，自己按情况配置。")])]),t._v(" "),n("li",[n("p",[t._v("Access-Control-Allow-Methods，OPTIONS 一定要有的，另外一般也就 GET 和 POST，如果你有其它的也可加进去；")])]),t._v(" "),n("li",[n("p",[t._v("Access-Control-Allow-Headers，这个要注意，里面一定要包含自定义的 http 头字段（就是说前端请求接口时，如果在 http 头里加了自定义的字段，这里配置一定要写上相应的字段）。")])]),t._v(" "),n("li",[n("p",[t._v("Access-Control-Expose-Headers，可不设置，看网上大致意思是默认只能获返回头的 6 个基本字段，要获取其它额外的，先在这设置才能获取它；")])]),t._v(" "),n("li",[n("p",[t._v("语句“ if ($request_method = 'OPTIONS') { ”，因为浏览器判断是否允许跨域时会先往后端发一个 options 请求，然后根据返回的结果判断是否允许跨域请求，所以这里单独判断这个请求，然后直接返回。")])])]),t._v(" "),n("h2",{attrs:{id:"gzip-压缩策略"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#gzip-压缩策略"}},[t._v("#")]),t._v(" gzip 压缩策略")]),t._v(" "),n("p",[t._v("浏览器请求 url，同时声明当前浏览器可以支持压缩类型（gzip、deflate 等），服务端会把内容根据浏览器所支持的压缩策略去进行压缩并返回给浏览器，浏览器拿到数据以后进行解码。")]),t._v(" "),n("p",[n("img",{attrs:{src:a(396),alt:"image-20200214003031201"}})]),t._v(" "),n("p",[n("img",{attrs:{src:a(397),alt:"image-20200214003048549"}})]),t._v(" "),n("p",[t._v("Nginx 默认只对 text/html 进行压缩 ，如果要对 html 之外的内容进行压缩传输，需要我们进行手动配置。")])])}),[],!1,null,null,null);s.default=e.exports}}]);